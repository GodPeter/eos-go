package rlp

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

//func TestRLP(t *testing.T){
//	// rlp.Debug = true
//
//	// ver := &p2p.HandshakeMessage{}
//	// data := []byte{182, 4, 207, 5, 123, 191, 183, 38, 64, 71, 31, 217, 16, 188, 182, 118, 57, 194, 45, 249, 249, 36, 112, 147, 108, 221, 193, 173, 224, 226, 242, 231, 220, 79, 175, 186, 35, 176, 252, 179, 212, 72, 69, 200, 40, 165, 56, 229, 143, 248, 246, 202, 22, 25, 201, 131, 194, 41, 26, 156, 51, 209, 74, 1, 207, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 118, 126, 44, 252, 115, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 49, 50, 55, 46, 48, 46, 48, 46, 49, 58, 57, 56, 55, 54, 32, 45, 32, 97, 102, 98, 97, 50, 51, 98, 102, 244, 0, 0, 0, 0, 244, 102, 94, 171, 21, 199, 9, 188, 30, 1, 14, 30, 84, 253, 165, 99, 226, 69, 72, 55, 78, 88, 137, 117, 120, 209, 63, 215, 221, 77, 103, 244, 0, 0, 0, 0, 244, 103, 216, 211, 35, 221, 239, 126, 121, 233, 136, 2, 22, 231, 200, 218, 248, 20, 49, 119, 58, 169, 186, 223, 155, 118, 160, 16, 144, 159, 3, 111, 115, 120, 16, 34, 69, 79, 83, 32, 84, 101, 115, 116, 32, 65, 103, 101, 110, 116, 34, 1, 0}
//	ver := &p2p.SignedBlockMessage{}
//	data := []byte{208, 116, 26, 70, 0, 0, 0, 0, 0, 234, 48, 85, 0, 0, 0, 0, 216, 216, 44, 167, 239, 36, 92, 184, 226, 139, 87, 192, 202, 75, 48, 71, 51, 108, 140, 73, 75, 100, 162, 104, 30, 158, 136, 181, 245, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 97, 36, 234, 30, 241, 145, 25, 109, 125, 83, 0, 64, 148, 83, 52, 20, 25, 113, 104, 80, 139, 122, 243, 196, 155, 57, 85, 152, 106, 160, 122, 0, 0, 0, 0, 0, 0, 0, 32, 9, 83, 6, 72, 29, 35, 178, 17, 88, 141, 24, 41, 35, 139, 234, 228, 2, 228, 17, 230, 246, 70, 69, 103, 123, 149, 147, 197, 117, 190, 211, 21, 36, 98, 16, 47, 70, 235, 107, 202, 14, 184, 73, 167, 187, 79, 45, 30, 67, 104, 64, 97, 27, 62, 39, 71, 79, 51, 208, 6, 199, 64, 87, 105, 0, 0}
//
//	err := DecodeBytes(data, ver)
//	if err != nil {
//		fmt.Println("error:", err)
//	}
//
//	aa, err := json.Marshal(ver)
//	if err != nil {
//		fmt.Println(err)
//	}
//	fmt.Println("decode:", string(aa))
//	fmt.Println("*****************************")
//	storage, err := EncodeToBytes(ver)
//	fmt.Println(storage)
//}

func TestUint(t *testing.T) {
	type UintStruct struct {
		A uint64
		B uint32
		C uint16
		D uint8
		E uint
	}
	timeStrut := UintStruct{
		A: 1000000,
		B: 9999,
		C: 99,
		D: 0,
		E: 999999,
	}
	result := []byte{0x40, 0x42, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x27, 0x0, 0x0, 0x63, 0x0, 0x0, 0x3f, 0x42, 0xf, 0x0}
	enc, err := EncodeToBytes(timeStrut)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("err %v,%#v\n", err, enc)
	uintMsg := UintStruct{}
	err = DecodeBytes(result, &uintMsg)
	assert.NoError(t, err, nil)
}

func TestInt(t *testing.T) {
	type IntStruct struct {
		A int64
		B int32
		C int16
		D int8
		E int
	}
	timeStrut := IntStruct{
		A: -1000,
		B: 9999,
		C: -1,
		D: -10,
		E: -999999,
	}
	result := []byte{0x18, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf, 0x27, 0x0, 0x0, 0xff, 0xff, 0xf6, 0xc1, 0xbd, 0xf0, 0xff}
	enc, err := EncodeToBytes(timeStrut)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("err %v,%#v\n", err, enc)
	uintMsg := IntStruct{}
	err = DecodeBytes(result, &uintMsg)
	assert.NoError(t, err, nil)
}
func TestString(t *testing.T) {
	type Strstruct struct {
		Name string
		Addr string
	}
	test := Strstruct{Name: "walker", Addr: "127.0.0.1:8900"}
	result := []byte{0x6, 0x77, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0xe, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x38, 0x39, 0x30, 0x30}
	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("err %v,%#v\n", err, enc)
	check := &Strstruct{}
	err = DecodeBytes(result, &check)
	assert.NoError(t, err, nil)
	assert.Equal(t, test, *check)
}

func TestBool(t *testing.T) {
	var test bool
	test = true
	result := []byte{0x01}
	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	var check bool
	err = DecodeBytes(result, &check)
	assert.NoError(t, err, nil)
	assert.Equal(t, test, check)

	type BoolStruct struct {
		Optional bool
	}
	test2 := BoolStruct{Optional: false}
	result = []byte{0x00}
	enc, err = EncodeToBytes(test2)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	check2 := &BoolStruct{}
	err = DecodeBytes(result, &check2)
	assert.NoError(t, err, nil)
	assert.Equal(t, test2, *check2)
}

func TestByteSlice(t *testing.T) {
	test := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 'a', 'b'}
	result := []byte{0xc, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x1, 0x61, 0x62}
	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("err %v,%#v\n", err, enc)
	check := []byte{}
	err = DecodeBytes(result, &check)
	assert.NoError(t, err, nil)
	assert.Equal(t, test, check)

	bytesliceLong := []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7}
	result = []byte{0xe8, 0x7, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7}
	//the length of the bytesliceLong is 1000
	enc, err = EncodeToBytes(bytesliceLong)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("err %v,%#v\n", err, enc)

}

//func TestByteArray(t *testing.T) {
//	test := [100]uint8{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63}
//	result := []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63}
//
//	enc, err := EncodeToBytes(test)
//	assert.NoError(t, err, nil)
//	assert.Equal(t, enc, result)
//	//fmt.Printf("%#v\n", enc)
//	check := [100]byte{}
//	err = DecodeBytes(result, &check)
//	assert.NoError(t, err, nil)
//	assert.Equal(t, test, check)
//
//	//var A [100]byte
//	//for i, _ := range A {
//	//	test[i] = byte(i)
//	//}
//	//fmt.Printf("%#v\n", A)
//}

func TestStruct(t *testing.T) {
	type Action struct {
		ActionAccount uint64
		Data          []byte
	}
	type Transaction struct {
		Expiration         uint32
		NetUsageWords      uint
		MaxCPUUsageMs      uint8
		DelaySec           uint
		ContextFreeActions []*Action
	}

	action1 := &Action{
		ActionAccount: 9876543,
		Data:          []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}}
	action2 := &Action{
		ActionAccount: 987654321,
		Data:          []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0}}
	test := &Transaction{Expiration: 100,
		NetUsageWords:      9,
		MaxCPUUsageMs:      199,
		DelaySec:           99999,
		ContextFreeActions: []*Action{action1, action2},
	}

	result := []byte{0x64, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0xc7, 0x9f, 0x86, 0x1, 0x0, 0x2, 0x3f, 0xb4, 0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0xb1, 0x68, 0xde, 0x3a, 0x0, 0x0, 0x0, 0x0, 0x14, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0}

	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("%#v\n", enc)
	check := &Transaction{}
	err = DecodeBytes(result, &check)
	assert.NoError(t, err, nil)
	assert.Equal(t, test, check)
}

func TestOptionalNil(t *testing.T) {

	type ProducerKey struct {
		AccountName     uint64 `json:"account_name"`
		BlockSigningKey []byte `json:"block_signing_key"`
	}
	type SharedProducerScheduleType struct {
		Version   uint32
		Producers []ProducerKey
	}
	type optionalStruct struct {
		NewProducers *SharedProducerScheduleType `eos:"optional"`
	}

	test := &optionalStruct{}
	//test := &optionalStruct{
	//	NewProducers:nil,
	//}
	result := []byte{0x0}

	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	fmt.Printf("%#v\n", enc)

	check := &optionalStruct{}
	scheduleType := &SharedProducerScheduleType{
		Version:   0,
		Producers: nil,
	}
	expected := &optionalStruct{
		NewProducers: scheduleType,
	}
	err = DecodeBytes(result, &check)
	fmt.Printf("decode result: %V\n", check) //check :   *rlp.SharedProducerScheduleType=&{0 []}
	assert.NoError(t, err, nil)
	assert.Equal(t, expected, check)
}

func TestOptional(t *testing.T) {

	type ProducerKey struct {
		AccountName     uint64 `json:"account_name"`
		BlockSigningKey []byte `json:"block_signing_key"`
	}
	type SharedProducerScheduleType struct {
		Version   uint32
		Producers []ProducerKey
	}
	type optionalStruct struct {
		NewProducers *SharedProducerScheduleType `eos:"optional"`
	}
	producekey := &ProducerKey{
		AccountName:     9939393939393,
		BlockSigningKey: []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
	}
	scheduleType := &SharedProducerScheduleType{
		Version:   1000,
		Producers: []ProducerKey{*producekey},
	}

	test := &optionalStruct{
		NewProducers: scheduleType,
	}
	result := []byte{0x1, 0xe8, 0x3, 0x0, 0x0, 0x1, 0xc1, 0x87, 0xb, 0x32, 0xa, 0x9, 0x0, 0x0, 0xa, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0}

	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	fmt.Printf("%#v\n", enc)

	check := &optionalStruct{}
	err = DecodeBytes(result, &check)
	assert.NoError(t, err, nil)
	assert.Equal(t, test, check)
	fmt.Printf("%V\n", check)
}

func TestOptionalStruct(t *testing.T) {

	type ProducerKey struct {
		AccountName     uint64 `json:"account_name"`
		BlockSigningKey []byte `json:"block_signing_key"`
	}
	type SharedProducerScheduleType struct {
		Version   uint32
		Producers []ProducerKey
	}
	type optionalStruct struct {
		NewProducers *SharedProducerScheduleType `eos:"optional"`
		Name         string
	}

	test := &optionalStruct{
		NewProducers: nil,
		Name:         "walker",
	}
	result := []byte{0x0, 0x6, 0x77, 0x61, 0x6c, 0x6b, 0x65, 0x72}

	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	fmt.Printf("%#v\n", enc)

	check := &optionalStruct{}
	scheduleType := &SharedProducerScheduleType{
		Version:   0,
		Producers: nil,
	}
	expected := &optionalStruct{
		NewProducers: scheduleType,
		Name:         "walker",
	}
	err = DecodeBytes(result, &check)
	fmt.Printf("decode result: %V\n", check) //check :   *rlp.SharedProducerScheduleType=&{0 []}
	fmt.Println(check)
	assert.NoError(t, err, nil)
	assert.Equal(t, expected, check)
}

func TestOptionalString(t *testing.T) {

	type ProducerKey struct {
		AccountName     uint64 `json:"account_name"`
		BlockSigningKey []byte `json:"block_signing_key"`
	}
	type SharedProducerScheduleType struct {
		Version   uint32
		Producers []ProducerKey
	}
	type optionalStruct struct {
		NewProducers *SharedProducerScheduleType `eos:"optional"`
		Name         string
	}
	producekey := &ProducerKey{
		AccountName:     9939393939393,
		BlockSigningKey: []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
	}
	scheduleType := &SharedProducerScheduleType{
		Version:   1000,
		Producers: []ProducerKey{*producekey},
	}

	test := &optionalStruct{
		NewProducers: scheduleType,
		Name:         "walker",
	}
	result := []byte{0x1, 0xe8, 0x3, 0x0, 0x0, 0x1, 0xc1, 0x87, 0xb, 0x32, 0xa, 0x9, 0x0, 0x0, 0xa, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x6, 0x77, 0x61, 0x6c, 0x6b, 0x65, 0x72}

	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("%#v\n", enc)

	check := &optionalStruct{}
	err = DecodeBytes(result, &check)
	assert.NoError(t, err, nil)
	assert.Equal(t, test, check)
	//fmt.Printf("%V\n", check)
}

func TestFcArray(t *testing.T) {
	type exp struct {
		A [4]int
		B [4]int `eos:"array"`
		C [4]uint64
	}
	newexp := &exp{
		A: [4]int{1, 2, 3, 4},
		B: [4]int{1, 2, 3, 4},
		C: [4]uint64{1, 2, 3, 4},
	}

	result := []byte{0x4, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	enc, err := EncodeToBytes(newexp)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("%#v\n", enc)

	check := &exp{}
	err = DecodeBytes(result, &check)
	//fmt.Printf("%v\n", check)
	assert.NoError(t, err, nil)
	assert.Equal(t, newexp, check)

}

func TestPublicKey(t *testing.T) {
	type PublicKey struct {
		Curve   byte
		Content [33]byte `eos:"array"`
	}
	test := &PublicKey{
		Curve:   0x0,
		Content: [33]uint8{0x2, 0xc0, 0xde, 0xd2, 0xbc, 0x1f, 0x13, 0x5, 0xfb, 0xf, 0xaa, 0xc5, 0xe6, 0xc0, 0x3e, 0xe3, 0xa1, 0x92, 0x42, 0x34, 0x98, 0x54, 0x27, 0xb6, 0x16, 0x7c, 0xa5, 0x69, 0xd1, 0x3d, 0xf4, 0x35, 0xcf},
	}
	result := []byte{0x0, 0x2, 0xc0, 0xde, 0xd2, 0xbc, 0x1f, 0x13, 0x5, 0xfb, 0xf, 0xaa, 0xc5, 0xe6, 0xc0, 0x3e, 0xe3, 0xa1, 0x92, 0x42, 0x34, 0x98, 0x54, 0x27, 0xb6, 0x16, 0x7c, 0xa5, 0x69, 0xd1, 0x3d, 0xf4, 0x35, 0xcf}

	enc, err := EncodeToBytes(test)
	assert.NoError(t, err, nil)
	assert.Equal(t, enc, result)
	//fmt.Printf("%#v\n", enc)

	check := &PublicKey{}
	err = DecodeBytes(result, &check)
	//fmt.Printf("%v\n", check)
	assert.NoError(t, err, nil)
	assert.Equal(t, test, check)

}
